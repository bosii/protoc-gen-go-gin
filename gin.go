package main

import (
	"fmt"
	"net/http"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	ginPkg = protogen.GoImportPath("github.com/gin-gonic/gin")
)

// protocVersion 生成版本
func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFile 生成文件
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 || !hasHTTPRule(file.Services) {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_gin.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath) //
	g.P("// Code generated by protoc-gen-go-gin. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-gin v", version)
	g.P("// - protoc            ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName) // 生成go packges的名字
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// 生成文件内容
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	g.QualifiedGoIdent(ginPkg.Ident("")) // 导入包
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

// 根据定义的service生成code
func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	sd := &serviceDesc{
		ServiceName: service.GoName,
	}
	for _, method := range service.Methods {
		// 跳过流式
		if method.Desc.IsStreamingServer() || method.Desc.IsStreamingClient() {
			continue
		}
		// 收集全部的请求方法和路径和出入参数
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			m, p := getHTTPRule(g, service, method, rule)
			comment := method.Comments.Leading.String() + method.Comments.Trailing.String()
			if comment != "" {
				comment = "// " + method.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
			}
			sd.Methods = append(sd.Methods, &methodDesc{
				Name:   method.GoName, // 函数名
				Desc:   comment,       // 注释
				Method: m,             // 请求方法
				Path:   p,             // 请求路径
				Req:    method.Input.GoIdent.GoName,
				Resp:   method.Output.GoIdent.GoName,
			})
			// 结构体已经生成 参数校验给到外面
		}
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

// getHTTPRule 获取路由和路径
func getHTTPRule(g *protogen.GeneratedFile, service *protogen.Service, m *protogen.Method, rule *annotations.HttpRule) (string, string) {
	var (
		path   string // http路径
		method string // http方法
	)

	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	if method == "" {
		panic("error not method")
	}
	if path == "" {
		panic("error not path")
	}
	return method, path
}

// hasHTTPRule 判断是否含有http的规则
func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}
